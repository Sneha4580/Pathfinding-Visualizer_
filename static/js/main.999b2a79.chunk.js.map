{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/bfs.js","algorithms/dfs.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","dfs","dfsRecursive","currentNode","getUnvisitedNeighborsDFS","PathfindingVisualizer","state","mouseIsPressed","selectedAlgorithm","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodeElement","document","getElementById","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","clearGrid","unshift","getNodesInShortestPathOrder","queue","bfs","getNodesInShortestPathOrderBFS","getNodesInShortestPathOrderDFS","console","error","animateAlgorithm","value","onChange","e","target","onClick","visualizeAlgorithm","toUpperCase","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.999b2a79.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}","export function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const queue = [];\r\n\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.isVisited = false;\r\n      node.previousNode = null;\r\n    }\r\n  }\r\n\r\n  queue.push(startNode);\r\n  startNode.isVisited = true;\r\n\r\n  while (queue.length > 0) {\r\n    const currentNode = queue.shift(); \r\n    if (currentNode === finishNode) {\r\n      return visitedNodesInOrder; \r\n    }\r\n\r\n    visitedNodesInOrder.push(currentNode);\r\n\r\n    const neighbors = getUnvisitedNeighbors(currentNode, grid);\r\n    for (const neighbor of neighbors) {\r\n      if (!neighbor.isWall && !neighbor.isVisited) {\r\n        neighbor.isVisited = true;\r\n        neighbor.previousNode = currentNode;\r\n        queue.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodesInOrder;\r\n}\r\n\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode); \r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}","export function dfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.isVisited = false;\r\n      node.previousNode = null;\r\n    }\r\n  }\r\n\r\n  dfsRecursive(startNode, finishNode, grid, visitedNodesInOrder);\r\n\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction dfsRecursive(currentNode, finishNode, grid, visitedNodesInOrder) {\r\n  if (!currentNode || currentNode.isWall) return false;\r\n\r\n  currentNode.isVisited = true;\r\n  visitedNodesInOrder.push(currentNode);\r\n\r\n  if (currentNode === finishNode) return true;\r\n  const neighbors = getUnvisitedNeighborsDFS(currentNode, grid); // \r\n  for (const neighbor of neighbors) {\r\n    \r\n    if (!neighbor.isWall && !neighbor.isVisited) {\r\n      neighbor.previousNode = currentNode;\r\n      if (dfsRecursive(neighbor, finishNode, grid, visitedNodesInOrder)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighborsDFS(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}","\r\nimport React, { Component } from 'react';\r\nimport Node from './Node/Node';\r\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\r\nimport { bfs, getNodesInShortestPathOrderBFS } from '../algorithms/bfs';\r\nimport { dfs, getNodesInShortestPathOrderDFS } from '../algorithms/dfs';\r\n\r\nimport './PathfindingVisualizer.css';\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      selectedAlgorithm: 'dijkstra',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  \r\n  clearGrid() {\r\n  \r\n    const grid = getInitialGrid();\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        const nodeElement = document.getElementById(`node-${node.row}-${node.col}`);\r\n        if (nodeElement) {\r\n          nodeElement.className = 'node';\r\n          if (node.isStart) nodeElement.className += ' node-start';\r\n          if (node.isFinish) nodeElement.className += ' node-finish';\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid });\r\n  }\r\n\r\n  // --- Visualization Logic ---\r\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      const node = visitedNodesInOrder[i];\r\n      setTimeout(() => {\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-shortest-path';\r\n        }\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    this.clearGrid();\r\n\r\n    const { grid, selectedAlgorithm } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n\r\n    let visitedNodesInOrder;\r\n    let nodesInShortestPathOrder;\r\n\r\n    switch (selectedAlgorithm) {\r\n      case 'dijkstra':\r\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        break;\r\n      case 'bfs':\r\n        visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n        nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(finishNode);\r\n        break;\r\n      case 'dfs':\r\n        visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n        nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(finishNode);\r\n        break;\r\n      default:\r\n        console.error('Unknown algorithm selected:', selectedAlgorithm);\r\n        return;\r\n    }\r\n\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed, selectedAlgorithm } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* UI for Algorithm Selection */}\r\n        <div className=\"controls\">\r\n          <select\r\n            value={selectedAlgorithm}\r\n            onChange={(e) => this.setState({ selectedAlgorithm: e.target.value })}\r\n            className=\"algorithm-select\"\r\n          >\r\n            <option value=\"dijkstra\">Dijkstra's Algorithm</option>\r\n            <option value=\"bfs\">Breadth-First Search (BFS)</option>\r\n            <option value=\"dfs\">Depth-First Search (DFS)</option>\r\n          </select>\r\n          <button onClick={() => this.visualizeAlgorithm()} className=\"visualize-button\">\r\n            Visualize {selectedAlgorithm.toUpperCase()}\r\n          </button>\r\n          <button onClick={() => this.clearGrid()} className=\"clear-button\">\r\n            Clear Grid\r\n          </button>\r\n        </div>\r\n\r\n        {/* Grid Rendering */}\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className=\"grid-row\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}